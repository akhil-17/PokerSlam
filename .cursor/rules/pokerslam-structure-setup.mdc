---
description: 
globs: 
alwaysApply: false
---
## Project: Poker Slam

### Overview
Poker Slam is a Swift-based puzzle game where players find poker hands within a 5x5 grid of playing cards. The game is inspired by Candy Crush and features intuitive touch interactions, animations, and a scoring system based on the rarity of poker hands.

---

## Project Setup
1. Create a new Swift project in Cursor, using SwiftUI as the UI framework.
2. Set the app’s name to **Poker Slam**.
3. Install necessary dependencies:
   - **SF Symbols** for card suits.
   - Custom font: **SF Compact Semibold** with system font fallback.
4. Define a **mesh gradient background** that persists across all views and continually animates.
5. Implement a **global state manager** to track the player’s score and highest score.

---

## UI Components

### Main Menu
- Large **title text**: "Poker Slam"
- Three vertically stacked options: **Start, How to Play, Settings**
- Navigation:
  - `Start` → Main Game View
  - `How to Play` → Fullscreen Carousel Instructions
  - `Settings` → Player-configurable settings view

### How to Play (Carousel)
- 3 screens explaining gameplay with:
  - 2-3 lines of text
  - Looping GIF or video
  - Swipe gestures & Next/Back buttons (chevron.left, chevron.right)
  - "Done" button on the last screen to return to Main Menu

### Main Game View
1. **5x5 Card Grid**
   - **25 random cards** from a set of 52.
   - Cards animate into place from top to bottom.
   - Grid padding: 16pts (left/right), 8pt spacing between cards.
   - Individual **rotation3DEffect() animations** for each card.
   
2. **Score Display**
   - Centered at the top.
   - Animates in after grid loads.
   - Updates dynamically as hands are played.
   
3. **Poker Hand Reference Overlay**
   - Question mark button (top-right) opens an overlay.
   - Lists all **valid poker hands** with:
     - Title
     - Description
     - Example cards (scaled to half-size, horizontally stacked)
   - Close button dismisses the overlay.

---

## Card UI
- **Size**: 60x40pts
- **Rank Font Size**: 24pt
- **Suits**: SF Symbols for Hearts, Diamonds, Clubs, Spades
- **Card Styling:**
  - Background: `#191919`
  - Corner Radius: `8pts`
  - Shadow: `x: 0, y: 1, radius: 2, color: #191919, opacity: 30%`
  - Colors by suit:
    - Hearts: `#C02D40`
    - Diamonds: `#CEAB27`
    - Clubs: `#2875BA`
    - Spades: `#E66523`

---

## Gameplay Mechanics
1. **Card Selection**
   - Tapping selects a card:
     - **Size increases** to 44x66 pts
     - **Shadow update**: x: 0, y: 4, radius: 4, opacity: 50%
     - **1pt border** in `#d4d4d4`
     - Haptic feedback for selection/unselection
   - Only adjacent cards (row, column, diagonal) are eligible for selection.
   - Ineligible cards wiggle on tap with an error message.

2. **Valid Poker Hands Detection**
   - Detects hands of **2 to 5 cards**.
   - Displays the **best scoring poker hand** possible from selected cards.
   - "Play hand" button appears when a valid hand is selected.

3. **Scoring System**
   - Hands are assigned a score from 5 (lowest) to 100 (highest).
   - If multiple hands exist in a selection, only the highest-ranked hand is counted.
   - Score label updates dynamically with an animation.

4. **Playing a Hand**
   - Tapping "Play hand":
     - Adds score
     - Animates label merging into score counter
     - Removes played cards with fade-out & blur
     - Shifts remaining cards downward
     - Fills empty slots with new cards (if available in deck)

5. **Game End Conditions**
   - **Game Over** when no valid hands remain.
   - "Game over: No playable hands" message appears.
   - If a new high score is reached, the score label updates.
   - "Play again" button starts a new game.
   - Close button returns to the main menu.

