---
description: 
globs: 
alwaysApply: false
---
# Instructions for Implementing Poker Hand Detection in Poker Slam

## Overview
Implement the logic for detecting and validating poker hands in Poker Slam. This logic should be applied when players select adjacent cards to form a hand. The game should recognize the following poker hands:

---
## Steps to Implement Poker Hand Detection

### 1. Create a Function to Check for Poker Hands
Define a function `detectPokerHand(cards: [Card]) -> HandType?` that accepts an array of `Card` objects and returns the identified `HandType` or `nil` if no valid hand is found.

- Each `Card` object should have:
  - `rank: Int` (7 through Ace, represented as 7-14)
  - `suit: String` ("hearts", "diamonds", "clubs", "spades")

---
### 2. Implement Individual Hand Checks
#### **(1) Pair**
- Check if exactly **two** cards have the same rank.

#### **(2) Two Pair**
- Check if exactly **four** cards contain two distinct pairs of matching ranks.

#### **(3) Three of a Kind**
- Check if exactly **three** cards share the same rank.

#### **(4) Four of a Kind**
- Check if exactly **four** cards share the same rank.

#### **(5) Straight**
- Check if exactly **five** cards have sequential ranks **in any order**.
- Example: `[3, 4, 5, 6, 7]` or `[7, 8, 9, 10, J]`.

#### **(6) Nearly Straight**
- Check if exactly **four** cards have sequential ranks **in any order**.

#### **(7) Mini Straight**
- Check if exactly **three** cards have sequential ranks **in any order**.

#### **(8) Flush**
- Check if exactly **five** cards share the same suit.

#### **(9) Nearly Flush**
- Check if exactly **four** cards share the same suit.

#### **(10) Mini Flush**
- Check if exactly **three** cards share the same suit.

#### **(11) Royal Flush**
- Check if exactly **five** cards share the same suit and contain the ranks `[10, J, Q, K, A]` in any order.

#### **(12) Nearly Royal Flush**
- Check if exactly **four** cards share the same suit and contain the ranks `[J, Q, K, A]` in any order.

#### **(13) Mini Royal Flush**
- Check if exactly **three** cards share the same suit and contain the ranks `[J, Q, K]` in any order.

#### **(14) Full House**
- Check if exactly **five** cards contain a **Pair** and a **Three of a Kind** in any order.
- Example: `[3, 3, 2, 3, 2]`.

---
## 3. Implement the Poker Hand Evaluation
1. Sort the selected `cards` by rank.
2. Count occurrences of each rank and suit.
3. Use conditions to determine which poker hand is formed.
4. Return the highest-ranking valid hand found (e.g., **Full House > Three of a Kind**).
5. Trigger the appropriate UI animation and scoring based on the detected hand.

---
## 4. Testing and Debugging
- Write test cases to ensure correct hand detection.
- Print debug logs for selected hands to verify accuracy.
- Ensure **no false positives** occur for invalid combinations.


